{"version":3,"file":"app.bundle.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;AClCnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgB;;;AClDuB;AACN;;AAEjC;AACA,yBAAyB;AAClB;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;;AAEA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,yBAAyB,OAAO;AAChC;AACA;AACA;AACO;AACP,sBAAsB,IAAI;AAC1B;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;;AC9F0B;;AAE1B;AACA,kBAAkB,iBAAiB;AACnC;AACA,qBAAqB,UAAU;AAC/B;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA,GAAG;AACH;AACwC;;;ACvHnB;AAC2B;AACY;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAA6B;AACxD;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,qBAAqB,aAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAyB;AAC7B,IAAI,aAAa;AACjB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,MAAM,UAAsB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,aAAa;AACnB;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iBAA6B;AACvC,UAAU,aAAa;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAyB;AACrC,YAAY,wBAAoC;AAChD,YAAY,aAAa;AACzB,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAsB;AACpC,gBAAgB,iBAA6B;AAC7C;AACA;AACA,cAAc,aAAa;AAC3B;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI,iBAA6B,CAAC,iBAA6B;AAC/D,IAAI,aAAa;AACjB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAA6B;AACnD,MAAM,gBAA4B;;AAElC;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE,OAAmB;AACrB,EAAE,aAAa;AACf,EAAE,aAAa;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://todolist/./src/Project.js","webpack://todolist/./src/Todo.js","webpack://todolist/./src/dataManager.js","webpack://todolist/./src/display.js","webpack://todolist/./src/index.js"],"sourcesContent":["class Project {\n  constructor(name, id) {\n    this._id = id || crypto.randomUUID();\n    this._name = name;\n    this._todos = new Map();\n  }\n  get id() {\n    return this._id;\n  }\n  set id(id) {\n    this._id = id;\n  }\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n  }\n  get todos() {\n    return this._todos;\n  }\n  set todos(todos) {\n    this._todos = todos;\n  }\n  addTodoToProject(todo) {\n    this._todos.set(todo.id, todo);\n  }\n  removeTodoFromProject(todoID) {\n    this._todos.delete(todoID);\n  }\n  getTodoById(id) {\n    return this._todos.get(id);\n  }\n}\nexport { Project };\n","class Todo {\n  constructor(title, description = \"\", priority = \"p1\", dueDate, status, id) {\n    this._id = id || crypto.randomUUID();\n    this._title = title;\n    this._description = description;\n    this._priority = priority;\n    this._dueDate = dueDate;\n    this._status = status || false;\n  }\n  get id() {\n    return this._id;\n  }\n  set id(id) {\n    this._id = id;\n  }\n  get title() {\n    return this._title;\n  }\n  set title(title) {\n    this._title = title;\n  }\n  get description() {\n    return this._description;\n  }\n  set description(description) {\n    this._description = description;\n  }\n  get priority() {\n    return this._priority;\n  }\n  set priority(priority) {\n    this._priority = priority;\n  }\n  get dueDate() {\n    return this._dueDate;\n  }\n  set dueDate(dueDate) {\n    this._dueDate = dueDate;\n  }\n  get status() {\n    return this._status;\n  }\n  set status(status) {\n    this._status = status;\n  }\n  toggleStatus() {\n    this._status = !this._status;\n  }\n}\n\nexport { Todo };\n","import { Project } from \"./Project.js\";\nimport { Todo } from \"./Todo.js\";\n\nconst projectMap = new Map();\nlet currentProject = \"\"; //object of current displayed project\nexport function getCurrentProject() {\n  return currentProject;\n}\nexport function setCurrentProject(projectID) {\n  currentProject = projectMap.get(projectID);\n}\nexport function getProjectMap() {\n  return projectMap;\n}\nexport function changeProjectName(id, newName) {\n  projectMap.get(id).name = newName;\n  saveData();\n}\n//init data\nfunction initData() {\n  const inbox_project = new Project(\"inbox\");\n  projectMap.set(inbox_project.id, inbox_project);\n\n  //placeholder data including default project inbox\n  const test_todo = new Todo(\"title\", \"desc\", \"1\");\n  inbox_project.addTodoToProject(test_todo);\n}\nexport function getData() {\n  if (localStorage.getItem(\"projects\") === null) {\n    initData();\n  } else {\n    const projects = JSON.parse(localStorage.getItem(\"projects\"));\n    //Need to recreate all projects and todos to restore methods\n    for (let project of projects) {\n      project = project[1];\n      addNewProject(project._name, project._id);\n      const renewTodos = project._todos;\n      for (let todo of renewTodos) {\n        addNewTodo(\n          project._id,\n          todo[1]._title,\n          todo[1]._description,\n          todo[1]._priority,\n          todo[1]._dueDate,\n          todo[1]._status,\n          todo[1]._id,\n        );\n      }\n    }\n  }\n  setCurrentProjectToInbox();\n}\nfunction convertProjectMap(map) {\n  const convertedProjectMap = Array.from(map.entries()).map(([projectID, projectObj]) => {\n    const convertedTodoMap = {...projectObj};\n    convertedTodoMap._todos = Array.from(convertedTodoMap._todos.entries());\n    return [projectID, convertedTodoMap];\n  });\n  return convertedProjectMap;\n}\nfunction saveData() {\n  console.log(\"saving\");\n  const dataToStore = convertProjectMap(projectMap);\n  localStorage.setItem(\n    \"projects\",\n    JSON.stringify(dataToStore)\n  );\n}\nexport function addNewProject(name, id) {\n  const newProject = new Project(name, id);\n  projectMap.set(newProject.id, newProject);\n  saveData();\n}\nexport function addNewTodo(projectID, title, desc, pri, date, status, todoID) {\n  const newTodo = new Todo(title, desc, pri, date, status, todoID);\n  projectMap.get(projectID).addTodoToProject(newTodo);\n  saveData();\n}\nexport function deleteTodo(projectID, todoID) {\n  projectMap.get(projectID).removeTodoFromProject(todoID);\n  saveData();\n}\nexport function toggleTodoStatus(projectID, todoID) {\n  projectMap.get(projectID).getTodoById(todoID).toggleStatus();\n  saveData();\n}\nexport function deleteProject(projectID) {\n  projectMap.delete(projectID);\n  saveData();\n}\nexport function setCurrentProjectToInbox() {\n  currentProject = projectMap.values().next().value;\n}\nexport function getInboxID() {\n  return projectMap.values().next().value.id;\n}\nexport function getTodoByID(projectID, todoID) {\n  return projectMap.get(projectID).getTodoById(todoID);\n}","import {\n  getCurrentProject,\n  getProjectMap,\n  getInboxID,\n} from \"./dataManager.js\";\n\nfunction updateDisplay() {\n  const project = getCurrentProject();\n  const projectName = document.querySelector(\"#projectHeader\");\n  if (project.id === getInboxID()) {\n    projectName.removeAttribute(\"contenteditable\");\n  } else {\n    projectName.setAttribute(\"contenteditable\", \"plaintext-only\");\n  }\n  projectName.textContent = project.name;\n\n  const display = document.querySelector(\"#display\");\n  display.innerHTML = \"\";\n\n  project.todos.forEach((todo) => {\n    //Parent Todo div for each todo w/ todo id\n    const todoDiv = document.createElement(\"div\");\n    todoDiv.className = \"todo\";\n    todoDiv.setAttribute(\"data-todo-id\", todo.id);\n    todoDiv.setAttribute(\"data-project-id\", project.id);\n    if (todo.status) {\n      todoDiv.setAttribute(\"data-status\", \"complete\");\n    }\n    //Parent div for todo header for toggle, title, edit, delete\n    const todoHeaderDiv = document.createElement(\"div\");\n    todoHeaderDiv.className = \"todoHeaderDiv\";\n    todoHeaderDiv.setAttribute(\"data-action\", \"expand\");\n\n    const todoToggle = document.createElement(\"input\");\n    todoToggle.classList.add(\"todoToggle\");\n    todoToggle.type = \"checkbox\";\n    todoToggle.checked = todo.status;\n\n    const todoTitle = document.createElement(\"h2\");\n    todoTitle.classList.add(\"todoTitle\");\n    todoTitle.textContent = todo.title;\n\n    const todoEditButton = document.createElement(\"button\");\n    todoEditButton.classList.add(\"todoEditButton\");\n    todoEditButton.setAttribute(\"data-action\", \"edit-todo\");\n\n    const todoDeleteButton = document.createElement(\"button\");\n    todoDeleteButton.classList.add(\"todoDeleteButton\");\n    todoDeleteButton.setAttribute(\"data-action\", \"delete-todo\");\n\n    //Description\n    const newTodoDescription = document.createElement(\"p\");\n    newTodoDescription.className = \"todoDescription\";\n    newTodoDescription.textContent = todo.description;\n\n    //Due Date\n    const todoDueDate = document.createElement(\"p\");\n    const tempDate = new Date(todo.dueDate).toDateString();\n    todoDueDate.textContent = tempDate !== \"Invalid Date\" ? tempDate : \"\";\n\n    //Append elements to display\n    display.append(todoDiv);\n    todoDiv.append(todoHeaderDiv);\n    todoHeaderDiv.append(todoToggle);\n    todoHeaderDiv.append(todoTitle);\n    todoHeaderDiv.append(todoEditButton);\n    todoHeaderDiv.append(todoDeleteButton);\n    todoDiv.append(newTodoDescription);\n    todoDiv.append(todoDueDate);\n  });\n}\nfunction updateSidebar() {\n  const projectMap = getProjectMap();\n  const projectsList = document.querySelector(\"#sidebar ul\");\n  projectsList.innerHTML = \"\";\n  projectMap.values().forEach((project) => {\n    //Parent project div for each project w/ project id\n    const projectDiv = document.createElement(\"div\");\n    projectDiv.className = \"project\";\n    projectDiv.setAttribute(\"data-project-id\", project.id);\n    if (project.id === getCurrentProject().id) {\n      projectDiv.classList.add(\"selected\");\n    }\n\n    const projectBtn = document.createElement(\"button\");\n    projectBtn.classList.add(\"projectButton\");\n    projectBtn.textContent = project.name;\n    projectBtn.setAttribute(\"data-action\", \"select-project\");\n\n    let projectDeleteButton;\n    if (project.id !== getInboxID()) {\n      //Delete Button + svg icon\n      projectDeleteButton = document.createElement(\"button\");\n      projectDeleteButton.classList.add(\"projectDeleteButton\");\n      projectDeleteButton.setAttribute(\"data-action\", \"delete-project\");\n\n      const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n      svg.setAttribute(\"height\", \"24\");\n      svg.setAttribute(\"width\", \"24\");\n      svg.setAttribute(\"viewBox\", \"0 -960 960 960\");\n      svg.setAttribute(\"fill\", \"currentColor\");\n      const path = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"path\"\n      );\n      path.setAttribute(\n        \"d\",\n        \"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z\"\n      );\n      svg.appendChild(path);\n      projectDeleteButton.appendChild(svg);\n    }\n    projectsList.appendChild(projectDiv);\n    projectDiv.appendChild(projectBtn);\n    if (project.id !== getInboxID()) {\n      projectDiv.appendChild(projectDeleteButton);\n    }\n  });\n}\nexport { updateDisplay, updateSidebar };\n","import \"./style.css\";\nimport * as dataManager from \"./dataManager.js\";\nimport { updateDisplay, updateSidebar } from \"./display.js\";\n\n//New Todo button\nfunction setupNewTodoDialog() {\n  const dialog = document.getElementById(\"newTodoDialog\");\n  const newTodoTitle = newTodoDialog.querySelector(\"#todoTitle\");\n  const newTodoDescription = newTodoDialog.querySelector(\"#description\");\n  const newTodoPriority = newTodoDialog.querySelector(\"#priority\");\n  const newTodoDueDate = newTodoDialog.querySelector(\"#dueDate\");\n  const newTodoProject = newTodoDialog.querySelector(\"#selectProject\");\n\n  const newTodo = document.getElementById(\"newTodoBtn\");\n  newTodo.addEventListener(\"click\", () => {\n    populateProjectSelector();\n    newTodoTitle.value = \"\";\n    newTodoDescription.value = \"\";\n    newTodoPriority.value = \"\";\n    newTodoDueDate.value = \"\";\n    newTodoProject.value = dataManager.getCurrentProject().id;\n    newTodoTitle.dataset.todoId = \"\";\n    dialog.showModal();\n  });\n}\nfunction populateProjectSelector() {\n  const options = document.getElementById(\"selectProject\");\n  options.innerHTML = \"\";\n  const projectMap = dataManager.getProjectMap();\n  for (const project of projectMap.keys()) {\n    const option = document.createElement(\"option\");\n    option.value = project;\n    option.textContent = projectMap.get(project).name;\n    options.appendChild(option);\n  }\n}\n//New Project button\nfunction setupNewProjectDialog() {\n  const newProjectBtn = document.getElementById(\"newProjectBtn\");\n  newProjectBtn.addEventListener(\"click\", () => {\n    const projectName = prompt(\"Enter project name\");\n    dataManager.addNewProject(projectName);\n    updateSidebar();\n  });\n}\n//New Todo creation\nfunction setupCreateTodoEvent() {\n  const newTodoDialog = document.getElementById(\"newTodoDialog\");\n  const newTodoTitle = newTodoDialog.querySelector(\"#todoTitle\");\n  const newTodoDescription = newTodoDialog.querySelector(\"#description\");\n  const newTodoPriority = newTodoDialog.querySelector(\"#priority\");\n  const newTodoDueDate = newTodoDialog.querySelector(\"#dueDate\");\n  const newTodoProject = newTodoDialog.querySelector(\"#selectProject\");\n  const confirmNewTodo = newTodoDialog.querySelector(\"#todoFormSubmit\");\n\n  confirmNewTodo.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    const requiredFields = newTodoDialog.querySelectorAll(\"[required]\");\n    let valid = true;\n    requiredFields.forEach((field) => {\n      if (!field.value) {\n        valid = false;\n      }\n    });\n    if (valid) {\n      dataManager.addNewTodo(\n        newTodoProject.value,\n        newTodoTitle.value,\n        newTodoDescription.value,\n        newTodoPriority.value,\n        newTodoDueDate.value,\n        false,\n        newTodoTitle.dataset.todoId\n      );\n      //update ui\n      updateDisplay();\n      newTodoDialog.close();\n    } else {\n      alert(\"Please fill in all fields\");\n    }\n  });\n}\n//Cancel new todo\nfunction setupCancelTodoEvent() {\n  const cancel = newTodoDialog.querySelector(\"#todoFormCancel\");\n  cancel.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    newTodoDialog.close();\n  });\n}\nfunction setupClickEventsForSidebar() {\n  const sidebar = document.querySelector(\"#sidebar\");\n  sidebar.addEventListener(\"click\", (event) => {\n    const actionElement = event.target.closest(\"[data-action]\");\n    if (actionElement) {\n      const action = actionElement.dataset.action;\n      const projectID = actionElement\n        .closest(\"[data-project-id]\")\n        .getAttribute(\"data-project-id\");\n      switch (action) {\n        case \"select-project\":\n          dataManager.setCurrentProject(projectID);\n          updateDisplay();\n          break;\n        case \"delete-project\":\n          if (\n            confirm(\n              \"Are you sure you want to delete this project and all of its todos?\"\n            )\n          ) {\n            dataManager.deleteProject(projectID);\n            dataManager.setCurrentProjectToInbox();\n            updateSidebar();\n            updateDisplay();\n          }\n          break;\n      }\n    }\n  });\n}\nfunction setupClickEventsForDisplay() {\n  const display = document.querySelector(\"#display\");\n  display.addEventListener(\"click\", (event) => {\n    if (event.target.closest(\".todoToggle\")) {\n      return;\n    }\n    const actionElement = event.target.closest(\"[data-action]\");\n\n    if (actionElement) {\n      const todoID = actionElement\n        .closest(\"[data-todo-id]\")\n        .getAttribute(\"data-todo-id\");\n      const projectID =\n        actionElement.closest(\"[data-project-id]\").dataset.projectId;\n      const action = actionElement.dataset.action;\n      if (todoID) {\n        switch (action) {\n          case \"expand\":\n            const content = actionElement.nextElementSibling;\n            if (content.style.maxHeight) {\n              content.style.maxHeight = null;\n            } else {\n              content.style.maxHeight = content.scrollHeight + \"px\";\n            }\n            break;\n          case \"edit-todo\":\n            populateProjectSelector();\n            const todo = dataManager.getTodoByID(projectID, todoID);\n            const newTodoDialog = document.getElementById(\"newTodoDialog\");\n            const newTodoTitle = newTodoDialog.querySelector(\"#todoTitle\");\n            newTodoTitle.dataset.todoId = todoID;\n            const newTodoDescription =\n              newTodoDialog.querySelector(\"#description\");\n            const newTodoPriority = newTodoDialog.querySelector(\"#priority\");\n            const newTodoDueDate = newTodoDialog.querySelector(\"#dueDate\");\n            const newTodoProject =\n              newTodoDialog.querySelector(\"#selectProject\");\n\n            if (todo) {\n              newTodoTitle.value = todo.title;\n              newTodoDescription.value = todo.description;\n              newTodoPriority.value = todo.priority;\n              newTodoDueDate.value = todo.dueDate;\n              newTodoProject.value = projectID;\n            }\n            newTodoDialog.showModal();\n            break;\n          case \"delete-todo\":\n            if (confirm(\"Are you sure you want to delete this todo?\")) {\n              dataManager.deleteTodo(\n                dataManager.getCurrentProject().id,\n                todoID\n              );\n              updateDisplay();\n            }\n\n            break;\n        }\n      }\n    }\n  });\n}\nfunction setupBlurEventsForDisplay() {\n  const projectHeader = document.querySelector(\"#projectHeader\");\n  projectHeader.addEventListener(\"blur\", (event) => {\n    const newName = event.target.textContent.trim();\n    dataManager.changeProjectName(dataManager.getCurrentProject().id, newName);\n    updateSidebar();\n  });\n  projectHeader.addEventListener(\"keydown\", (event) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      event.target.blur();\n    }\n  });\n}\nfunction setupChangeEventsForDisplay() {\n  const display = document.querySelector(\"#display\");\n  display.addEventListener(\"change\", (event) => {\n    const toggle = event.target.closest(\".todoToggle\");\n    if (toggle) {\n      const todo = toggle.closest(\".todo\");\n      if (!todo) {\n        return;\n      }\n      const todoId = todo.dataset.todoId;\n      const project = dataManager.getCurrentProject();\n      dataManager.toggleTodoStatus(project.id, todoId);\n\n      const complete = toggle.checked;\n\n      if (complete) {\n        todo.setAttribute(\"data-status\", \"complete\");\n      } else {\n        todo.setAttribute(\"data-status\", \"incomplete\");\n      }\n    }\n  });\n}\n//main\nfunction initApp() {\n  dataManager.getData();\n  updateDisplay();\n  updateSidebar();\n  setupNewProjectDialog();\n  setupNewTodoDialog();\n  setupCreateTodoEvent();\n  setupCancelTodoEvent();\n  setupClickEventsForSidebar();\n  setupClickEventsForDisplay();\n  setupBlurEventsForDisplay();\n  setupChangeEventsForDisplay();\n}\ndocument.addEventListener(\"DOMContentLoaded\", initApp());\n\n"],"names":[],"sourceRoot":""}